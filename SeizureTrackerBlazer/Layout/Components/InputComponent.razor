@using System.Net
@using Microsoft.AspNetCore.Components
@using SeizureTrackerBlazer.Services

@switch (InputType)
{
    case InputTypes.Select:
        <select onchange="@onChange" class="form-select form-select mb-3"
                aria-label="@_labelText">
            <option selected>@_optionLabel</option>
            @if (_selectItems?.Any() == true)
            {
                @foreach (var type in _selectItems)
                {
                    <option value="@type">@type</option>
                }
            }
        </select>
        break;
    default:
        <label>@_labelText</label>
        <input type="@_inputDataType" value="@_value" oninput="@onInput" class="form-control"
               placeholder="@_placeholder">
        break;
}

@code
{
    private string? _labelText;
    private string? _inputType;
    private string? _inputDataType;
    private string? _value;
    private string? _placeholder;
    private string? _optionLabel;
    private List<string>? _selectItems;

    [Inject] private StateContainer? StateContainer { get; set; }
    [Parameter] public string? InputType { get; set; }
    [Parameter] public string? LabelText { get; set; }
    [Parameter] public string? InputDataType { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public List<string>? SelectItems { get; set; }
    [Parameter] public string? OptionLabel { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }


    protected override void OnInitialized()
    {
    }

    protected override void OnParametersSet()
    {
        _labelText = LabelText;
        _inputType = InputType;
        _inputDataType = InputDataType;
        _placeholder = Placeholder;
        _selectItems = SelectItems;
        _optionLabel = OptionLabel;
        _value = Value;
    }

    private void onInput(ChangeEventArgs? e)
    {
        if (e?.Value?.ToString() == _value)
            return;

        _value = e.Value.ToString();

        ValueChanged.InvokeAsync(_value);
    }

    private void onChange(ChangeEventArgs? e)
    {
        _value = e.Value.ToString();

        ValueChanged.InvokeAsync(_value);
    }
}
