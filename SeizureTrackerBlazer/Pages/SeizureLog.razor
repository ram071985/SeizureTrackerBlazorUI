@page "/"
@attribute [Authorize]
@inject StateContainer StateContainer


<PageTitle>Seizure Log</PageTitle>
<div class="container flex py-5">
    <EditForm EditContext="@_editContext" class="row justify-content-center" OnValidSubmit="submit"
              FormName="SeizureLog">
        <div class="col-md-3">
            <InputComponent InputType="@InputTypes.Input" InputDataType="@InputDataTypes.Date"
                            LabelText="@InputLabels.DateOfSeizure"
                            @bind-value="@Model!.SeizureDate"
            />
        </div>
        <div class="col-md-3">
            <InputComponent InputType="@InputTypes.Input" InputDataType="@InputDataTypes.Time"
                            LabelText="@InputLabels.TimeOfSeizure"
                            @bind-value="@Model!.SeizureTime"/>
        </div>
        <div class="col-md-3">
            <InputComponent InputType="@InputTypes.Input" InputDataType="@InputDataTypes.Number"
                            LabelText="@InputLabels.Intensity"
                            @bind-value="@Model!.SeizureIntensity" PlaceHolder="@PlaceHolderLabels.Intensity"/>
        </div>
        <div class="col-4 py-4">
            <InputComponent SelectItems="@StateContainer.SeizureType" OptionLabel="@OptionLabels.SeizureType"
                            InputType="@InputTypes.Select" LabelText="@AriaLabels.SeizureType"
                            @bind-value="@Model!.SeizureType"/>
            <select onchange="@onSeizureTypeSelectChange" class="form-select form-select mb-3"
                    aria-label="Enter multiple seizure types">
                <option selected>Choose seizure type(s)</option>
                @foreach (var type in StateContainer.SeizureType)
                {
                    <option value="@_seizureTypeInput">@type</option>
                }
            </select>
            @foreach (var type in _seizureTypesSelected)
            {
                <span class="badge rounded-pill text-bg-info">@type</span>
            }
        </div>
        <div class="col-md-4">
            <button type="submit" class="btn btn-primary btn-lg">Submit</button>
        </div>
    </EditForm>
</div>

@code
{
    private bool _showMultiSelect;
    private string _multiSelectText;
    private string _seizureTypeInput;
    private EditContext? _editContext;
    private ValidationMessageStore _messageStore;
    private List<string> _seizureTypesSelected;

    [Parameter] public EventCallback<string> OnInputCallback { get; set; }
    [SupplyParameterFromForm] private SeizureLogForm? Model { get; set; }


    protected override void OnInitialized()
    {
        Model ??= new();
        _editContext = new(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);
        StateContainer.OnChange += StateHasChanged;
        _multiSelectText = UIConstants.MultiSelectShowText;
        _seizureTypesSelected = new();
    }

    internal void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        // Custom validation logic
        // if (!Model!?.Options)
        // {
        //     _messageStore?.Add(() => Model.Options, "Select at least one.");
        // }
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }


    private void submit()
    {
    }

    private void onSeizureTypeSelectChange(ChangeEventArgs e)
    {
        _seizureTypesSelected.Add(e.Value.ToString());

        StateHasChanged();
    }

    private void onInput(ChangeEventArgs e)
    {
    }
}
